{"id":"js/shader/fragment.glsl","dependencies":[{"name":"C:\\Apache24\\htdocs\\THREE-Icosahedron\\package.json","includedInParent":true,"mtime":1609785086016}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D earth;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 eyeVector;\\nvarying vec3 vBary;\\nfloat PI = 3.141592653589793238;\\nvec2 hash22(vec2 p) {\\n\\tp = fract(p * vec2(5.3983, 5.4427));\\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\\n\\treturn fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\\n}\\nvoid main()\\t{\\n\\tvec3 X = dFdx(vNormal);\\n\\tvec3 Y = dFdy(vNormal);\\n\\tvec3 normal = normalize(cross(X,Y));\\n\\tfloat diffuse = dot(normal,vec3(1.));\\n\\tvec2 rand = hash22(vec2(floor(diffuse*10.)));\\n\\n\\tvec2 uvv = vec2(\\n\\t\\tsign(rand.x - 0.5)*1. + (rand.x -0.5)*.6,\\n\\t\\tsign(rand.y - 0.5)*1. + (rand.y -0.5)*.6\\n\\t);\\n\\n\\tfloat fresnel = pow(1. + dot(eyeVector,normal),2.);\\n\\n\\tvec2 uv = uvv*gl_FragCoord.xy/vec2(1000.);\\n\\t\\n\\tvec3 refracted = refract(eyeVector,normal, 1./3.);\\n\\tuv += 0.2*refracted.xy;\\n\\t\\n\\tvec4 t = texture2D(earth,uv);\\n\\t// gl_FragColor = vec4(vUv,0.0,1.);\\n\\tgl_FragColor = t*(1. - fresnel);\\n\\t// gl_FragColor = vec4(vBary,1.);\\n\\t// gl_FragColor = vec4(diffuse);\\n\\t// gl_FragColor = vec4(vec3(fresnel), 1.);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1209},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D earth;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 eyeVector;\\nvarying vec3 vBary;\\nfloat PI = 3.141592653589793238;\\nvec2 hash22(vec2 p) {\\n\\tp = fract(p * vec2(5.3983, 5.4427));\\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\\n\\treturn fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\\n}\\nvoid main()\\t{\\n\\tvec3 X = dFdx(vNormal);\\n\\tvec3 Y = dFdy(vNormal);\\n\\tvec3 normal = normalize(cross(X,Y));\\n\\tfloat diffuse = dot(normal,vec3(1.));\\n\\tvec2 rand = hash22(vec2(floor(diffuse*10.)));\\n\\n\\tvec2 uvv = vec2(\\n\\t\\tsign(rand.x - 0.5)*1. + (rand.x -0.5)*.6,\\n\\t\\tsign(rand.y - 0.5)*1. + (rand.y -0.5)*.6\\n\\t);\\n\\n\\tfloat fresnel = pow(1. + dot(eyeVector,normal),2.);\\n\\n\\tvec2 uv = uvv*gl_FragCoord.xy/vec2(1000.);\\n\\t\\n\\tvec3 refracted = refract(eyeVector,normal, 1./3.);\\n\\tuv += 0.2*refracted.xy;\\n\\t\\n\\tvec4 t = texture2D(earth,uv);\\n\\t// gl_FragColor = vec4(vUv,0.0,1.);\\n\\tgl_FragColor = t*(1. - fresnel);\\n\\t// gl_FragColor = vec4(vBary,1.);\\n\\t// gl_FragColor = vec4(diffuse);\\n\\t// gl_FragColor = vec4(vec3(fresnel), 1.);\\n}\";"},"lineCount":null}},"error":null,"hash":"e68da54e9c2a733cba8e2ac2173b956b","cacheData":{"env":{}}}