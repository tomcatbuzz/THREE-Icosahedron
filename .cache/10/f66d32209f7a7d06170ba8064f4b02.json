{"id":"js/shader/fragment1.glsl","dependencies":[{"name":"C:\\Apache24\\htdocs\\THREE-Icosahedron\\package.json","includedInParent":true,"mtime":1609785086016}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D earth;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 eyeVector;\\nvarying vec3 vBary;\\nfloat PI = 3.141592653589793238;\\nvec2 hash22(vec2 p) {\\n\\tp = fract(p * vec2(5.3983, 5.4427));\\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\\n\\treturn fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\\n}\\nvoid main()\\t{\\n  float width = 2.;\\n  vec3 d = fwidth(vBary);\\n  vec3 s = smoothstep( d*(width + 0.5), d*(width - 0.5),vBary);\\n  float line = max(s.x,max(s.y,s.z));\\n  if(line<0.1) discard;\\n\\tgl_FragColor = vec4(mix(vec3(1.), vec3(0.), 1. - line),1.);\\n\\t\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/fragment1.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/fragment1.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/fragment1.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/fragment1.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/fragment1.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":727},"source":"js/shader/fragment1.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/fragment1.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D earth;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 eyeVector;\\nvarying vec3 vBary;\\nfloat PI = 3.141592653589793238;\\nvec2 hash22(vec2 p) {\\n\\tp = fract(p * vec2(5.3983, 5.4427));\\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\\n\\treturn fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\\n}\\nvoid main()\\t{\\n  float width = 2.;\\n  vec3 d = fwidth(vBary);\\n  vec3 s = smoothstep( d*(width + 0.5), d*(width - 0.5),vBary);\\n  float line = max(s.x,max(s.y,s.z));\\n  if(line<0.1) discard;\\n\\tgl_FragColor = vec4(mix(vec3(1.), vec3(0.), 1. - line),1.);\\n\\t\\n}\";"},"lineCount":null}},"error":null,"hash":"c180d59160d827c4c7b4a33300fb93de","cacheData":{"env":{}}}